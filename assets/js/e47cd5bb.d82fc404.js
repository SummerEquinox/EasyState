"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[395],{2987:e=>{e.exports=JSON.parse('{"functions":[{"name":"new","desc":"Creates a new EasyState instance with the given initial value.\\n\\n:::caution\\nIt should be noted that EasyState deep clones on all accounts when working with tables. Do not expect external table updates to trigger subscribers.\\nYou are completely unable to access the deep cloned table by normal means. Updates for table-types must be done with `:Set()` if subscribers are to fire.\\n:::\\n\\n```lua\\nlocal foo = {}\\nprint(foo) -- {} (table: 0x4324234234)\\n\\nlocal state = EasyState.new(foo)\\nfoo.bar = \'baz\'\\n\\nprint(state:Get()) -- {} (table: 0x12321321321)\\n```","params":[{"name":"value","desc":"","lua_type":"boolean | number | string | { [any]: any }"}],"returns":[{"desc":"","lua_type":"EasyState"}],"function_type":"static","source":{"line":183,"path":"src/init.lua"}},{"name":"mini","desc":"Creates a minified EasyState instance with the given initial value. Mini states take less memory, but restrict the use of some methods.\\nMethods which are restricted to mini-states have it noted in their documentation and docstrings.\\n\\n:::caution\\nPlease see warning in the `.new` documentation for information on working with table-type EasyState objects.\\n:::","params":[{"name":"value","desc":"","lua_type":"boolean | number | string | { [any]: any }"}],"returns":[{"desc":"","lua_type":"EasyState"}],"function_type":"static","source":{"line":208,"path":"src/init.lua"}},{"name":"Get","desc":"Gets the current value of the state.","params":[],"returns":[{"desc":"","lua_type":"EasyStateValue"}],"function_type":"method","source":{"line":227,"path":"src/init.lua"}},{"name":"GetOriginal","desc":"Gets the original value of the state.","params":[],"returns":[{"desc":"","lua_type":"EasyStateValue"}],"function_type":"method","errors":[{"lua_type":"Restricted Method Access","desc":"This method is unavailable to minified states."}],"source":{"line":242,"path":"src/init.lua"}},{"name":"Set","desc":"Sets the state to a new value.","params":[{"name":"value","desc":"","lua_type":"EasyStateValue"}],"returns":[],"function_type":"method","source":{"line":260,"path":"src/init.lua"}},{"name":"Subscribe","desc":"Subscribes a callback to the state.","params":[{"name":"callback","desc":"","lua_type":"Subscriber"}],"returns":[{"desc":"","lua_type":"SubscriberID"}],"function_type":"method","source":{"line":288,"path":"src/init.lua"}},{"name":"SubscribeUntil","desc":"Subscribes a callback to the state until a certain value is reached.","params":[{"name":"callback","desc":"","lua_type":"Subscriber"},{"name":"untilValue","desc":"","lua_type":"EasyStateValue"}],"returns":[{"desc":"","lua_type":"SubscriberID"}],"function_type":"method","source":{"line":314,"path":"src/init.lua"}},{"name":"GetSubscriptionStatus","desc":"Gets the status of a subscriber by its ID.","params":[{"name":"subscriberID","desc":"","lua_type":"SubscriberID"}],"returns":[{"desc":"","lua_type":"SubscriptionState"}],"function_type":"method","source":{"line":351,"path":"src/init.lua"}},{"name":"Unsubscribe","desc":"Unsubscribes a subscriber.","params":[{"name":"subcriberID","desc":"","lua_type":"SubscriberID"}],"returns":[],"function_type":"method","source":{"line":367,"path":"src/init.lua"}},{"name":"UnsubscribeUntil","desc":"Unsubscribes a subscriber until a certain value is reached. Optionally allows a custom number of updates to pass before completely dropping the re-subscription potential.","params":[{"name":"subscriberID","desc":"","lua_type":"SubscriberID"},{"name":"untilValue","desc":"","lua_type":"EasyStateValue"},{"name":"dropSubscriberAfter","desc":"","lua_type":"number"}],"returns":[],"function_type":"method","source":{"line":384,"path":"src/init.lua"}},{"name":"UnsubscribeAll","desc":"Unsubscribes all subscribers. Suspended subscribers will still be re-subscribed if their condition is met.","params":[],"returns":[],"function_type":"method","source":{"line":437,"path":"src/init.lua"}},{"name":"Reset","desc":"Resets the state to its original value.","params":[],"returns":[],"function_type":"method","errors":[{"lua_type":"Restricted Method Access","desc":"This method is unavailable to minified states."}],"source":{"line":447,"path":"src/init.lua"}},{"name":"Freeze","desc":"Freezes the state so that it cannot be changed.","params":[],"returns":[],"function_type":"method","source":{"line":460,"path":"src/init.lua"}},{"name":"Unfreeze","desc":"Unfreezes the state so that it can be changed again.","params":[],"returns":[],"function_type":"method","source":{"line":469,"path":"src/init.lua"}},{"name":"IsFrozen","desc":"Checks if the state is frozen.","params":[],"returns":[{"desc":"","lua_type":"boolean\\r\\n"}],"function_type":"method","source":{"line":478,"path":"src/init.lua"}}],"properties":[],"types":[{"name":"EasyStateValue","desc":"Represents the value of an EasyState object.","lua_type":"number | string | boolean | { [any]: any }","source":{"line":19,"path":"src/init.lua"}},{"name":"Subscriber","desc":"Represents a function that will be called when the state changes.","lua_type":"(number | string | boolean | { [any]: any })? -> ...any","source":{"line":27,"path":"src/init.lua"}},{"name":"SubscriberID","desc":"Represents the ID of a subscriber.","lua_type":"userdata","source":{"line":35,"path":"src/init.lua"}},{"name":"SubscriptionState","desc":"Represents the status of a subscriber.","lua_type":"\\"Active\\" | \\"Suspended\\" | \\"Inactive\\"","source":{"line":43,"path":"src/init.lua"}}],"name":"EasyState","desc":"EasyState is a state container class for all kinds of state management.","source":{"line":111,"path":"src/init.lua"}}')}}]);