"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[181],{637:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>a,toc:()=>o});const a=JSON.parse('{"id":"basic","title":"Basic Usage","description":"EasyState is a powerful and lightweight state management solution for Roblox Lua. It provides a simple way to create, manage, and subscribe to state changes in your applications.","source":"@site/docs/basic.md","sourceDirName":".","slug":"/basic","permalink":"/EasyState/docs/basic","draft":false,"unlisted":false,"editUrl":"https://github.com/SummerEquinox/EasyState/edit/master/docs/basic.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"defaultSidebar","previous":{"title":"Getting Started","permalink":"/EasyState/docs/intro"},"next":{"title":"Advanced Usage","permalink":"/EasyState/docs/advanced"}}');var s=t(4848),r=t(8453);const i={sidebar_position:2},l="Basic Usage",c={},o=[{value:"Installation",id:"installation",level:2},{value:"Basic Usage",id:"basic-usage-1",level:2},{value:"Creating a State",id:"creating-a-state",level:3},{value:"Getting and Setting Values",id:"getting-and-setting-values",level:3},{value:"Subscribing to Changes",id:"subscribing-to-changes",level:3},{value:"Type Safety",id:"type-safety",level:3},{value:"Table Values",id:"table-values",level:3}];function u(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"basic-usage",children:"Basic Usage"})}),"\n",(0,s.jsx)(n.p,{children:"EasyState is a powerful and lightweight state management solution for Roblox Lua. It provides a simple way to create, manage, and subscribe to state changes in your applications."}),"\n",(0,s.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,s.jsx)(n.p,{children:"Add EasyState to your project using Wally:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-toml",children:'[dependencies]\r\nEasyState = "summerequinox/easystate@1.0.2"\n'})}),"\n",(0,s.jsx)(n.h2,{id:"basic-usage-1",children:"Basic Usage"}),"\n",(0,s.jsx)(n.h3,{id:"creating-a-state",children:"Creating a State"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'local EasyState = require(path.to.EasyState)\r\n\r\n-- Create a new state with an initial value\r\nlocal counter = EasyState.new(0)\r\nlocal name = EasyState.new("Player")\r\nlocal isActive = EasyState.new(false)\r\nlocal playerData = EasyState.new({\r\n    health = 100,\r\n    level = 1\r\n})\n'})}),"\n",(0,s.jsx)(n.h3,{id:"getting-and-setting-values",children:"Getting and Setting Values"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Get the current value\r\nlocal currentValue = counter:Get()\r\n\r\n-- Set a new value\r\ncounter:Set(5)\r\nname:Set("NewPlayer")\r\nisActive:Set(true)\r\nplayerData:Set({\r\n    health = 90,\r\n    level = 2\r\n})\r\n\r\n-- Reset to original value\r\ncounter:Reset()\n'})}),"\n",(0,s.jsx)(n.h3,{id:"subscribing-to-changes",children:"Subscribing to Changes"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Basic subscription\r\nlocal subscription = counter:Subscribe(function(newValue)\r\n    print("Counter changed to:", newValue)\r\nend)\r\n\r\n-- Subscribe until a specific value is reached\r\nlocal untilSubscription = counter:SubscribeUntil(function(value)\r\n    print("Counter is now:", value)\r\nend, 10)\r\n\r\n-- Unsubscribe when done\r\ncounter:Unsubscribe(subscription)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"type-safety",children:"Type Safety"}),"\n",(0,s.jsx)(n.p,{children:"EasyState is type-locked once created. This means you cannot change the type of value after initialization:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'local numberState = EasyState.new(5)\r\nnumberState:Set(10) -- Works fine\r\nnumberState:Set("string") -- Warning: Type mismatch, request will be dropped\n'})}),"\n",(0,s.jsx)(n.h3,{id:"table-values",children:"Table Values"}),"\n",(0,s.jsx)(n.p,{children:"When working with table values, EasyState automatically clones the tables to prevent reference issues:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"local data = EasyState.new({ count = 0 })\r\n\r\n-- Getting returns a clone\r\nlocal currentData = data:Get()\r\ncurrentData.count = 5 -- Won't affect the original state\r\n\r\n-- Setting with a table\r\ndata:Set({ count = 10 })\n"})})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>l});var a=t(6540);const s={},r=a.createContext(s);function i(e){const n=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);