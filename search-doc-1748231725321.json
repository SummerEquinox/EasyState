{"searchDocs":[{"title":"Getting Started","type":0,"sectionRef":"#","url":"/EasyState/docs/intro","content":"Getting Started EasyState is a lightweight, type-safe state container class designed specifically for Roblox development. It provides a simple yet powerful way to manage state across your Roblox applications with several key features that make it stand out: Subscription System: Built-in subscription mechanism that allows components to react to state changes efficientlyMemory Efficient: Optimized for performance with minimal overheadSimple API: Intuitive methods like Get(), Set(), Subscribe(), and Reset() make state management straightforwardFlexible Value Types: Supports numbers, strings, booleans, and tables as state valuesSubscription Control: Advanced features like SubscribeUntil() and UnsubscribeUntil() give you fine-grained control over state subscriptionsState Persistence: Maintains original values and provides easy reset functionality Whether you're building a complex game system or a simple UI component, EasyState provides the tools you need to manage state effectively while maintaining code clarity and performance. I wanted a solution which could be applicable to many situations.","keywords":"","version":"Next"},{"title":"UnsubscribeUntil Example","type":0,"sectionRef":"#","url":"/EasyState/docs/Examples/other","content":"UnsubscribeUntil Example local state = EasyState.new(0) local subscription = state:Subscribe(function(value) print(&quot;Value:&quot;, value) end) state:UnsubscribeUntil(subscription, 5) for i = 1, 10 do state:Set(i) end ","keywords":"","version":"Next"},{"title":"Advanced Usage","type":0,"sectionRef":"#","url":"/EasyState/docs/advanced","content":"","keywords":"","version":"Next"},{"title":"Shorthand Options​","type":1,"pageTitle":"Advanced Usage","url":"/EasyState/docs/advanced#shorthand-options","content":" ","version":"Next","tagName":"h2"},{"title":"Using Subscriber ID to Unsubscribe​","type":1,"pageTitle":"Advanced Usage","url":"/EasyState/docs/advanced#using-subscriber-id-to-unsubscribe","content":" When you get a subscriber ID from Subscribe(), you can call it directly to unsubscribe instead of using Unsubscribe():  local myState = EasyState.new(0) local subscriber = myState:Subscribe(function(value) print(&quot;State changed to:&quot;, value) end) -- Later, to unsubscribe: subscriber() -- This is the shorthand   This is equivalent to:  myState:Unsubscribe(subscriber)   ","version":"Next","tagName":"h3"},{"title":"Using State Object to Set Values​","type":1,"pageTitle":"Advanced Usage","url":"/EasyState/docs/advanced#using-state-object-to-set-values","content":" You can call the state object directly to set its value instead of using the Set() method:  local myState = EasyState.new(0) myState(42) -- Sets the state to 42   This is equivalent to:  myState:Set(42)   These shorthand options make your code more concise while maintaining the same functionality as their longer counterparts. ","version":"Next","tagName":"h3"},{"title":"Save Controller Example","type":0,"sectionRef":"#","url":"/EasyState/docs/Examples/save","content":"Save Controller Example This example demonstrates how to create a save controller using EasyState to manage and expose data cache updates to the rest of the client code. -- SaveController.lua local ReplicatedStorage = game:GetService(&quot;ReplicatedStorage&quot;) local EasyState = require(ReplicatedStorage.Packages.EasyState) local SaveController = {} -- Create a state for the entire data cache SaveController.Data = EasyState.new({}) -- Remote events for data updates local DataUpdateEvent = ReplicatedStorage:WaitForChild(&quot;DataUpdate&quot;) local KeyUpdateEvent = ReplicatedStorage:WaitForChild(&quot;KeyUpdate&quot;) -- Handle incoming data updates DataUpdateEvent.OnClientEvent:Connect(function(newData) SaveController.Data:Set(newData) end) -- Handle single key updates KeyUpdateEvent.OnClientEvent:Connect(function(key, value) local currentData = SaveController.Data:Get() currentData[key] = value SaveController.Data:Set(currentData) end) return SaveController Here's how other client code can use the controller: -- SomeOtherModule.lua local SaveController = require(path.to.SaveController) -- Subscribe to any data changes SaveController.Data:Subscribe(function(newData) print(&quot;Data updated:&quot;, newData) end) -- Access specific data local currentData = SaveController.Data:Get() print(&quot;Current coins:&quot;, currentData.coins) print(&quot;Current level:&quot;, currentData.level) print(&quot;Current inventory:&quot;, currentData.inventory) This controller provides a centralized way to manage and observe data changes across your client code. The entire data cache is stored in a single state, making it easy to handle both complete data updates and single key updates from the server. Other modules can require the SaveController and subscribe to the data state to react to any changes in the save data. The controller handles incoming data updates from the server and automatically updates the state with the new data. You can extend this pattern by adding methods to handle specific data types or update scenarios while maintaining the single source of truth for the data cache.","keywords":"","version":"Next"},{"title":"Basic Usage","type":0,"sectionRef":"#","url":"/EasyState/docs/basic","content":"","keywords":"","version":"Next"},{"title":"Installation​","type":1,"pageTitle":"Basic Usage","url":"/EasyState/docs/basic#installation","content":" Add EasyState to your project using Wally:  [dependencies] EasyState = &quot;summerequinox/easystate@1.0.2&quot;   ","version":"Next","tagName":"h2"},{"title":"Basic Usage​","type":1,"pageTitle":"Basic Usage","url":"/EasyState/docs/basic#basic-usage-1","content":" ","version":"Next","tagName":"h2"},{"title":"Creating a State​","type":1,"pageTitle":"Basic Usage","url":"/EasyState/docs/basic#creating-a-state","content":" local EasyState = require(path.to.EasyState) -- Create a new state with an initial value local counter = EasyState.new(0) local name = EasyState.new(&quot;Player&quot;) local isActive = EasyState.new(false) local playerData = EasyState.new({ health = 100, level = 1 })   ","version":"Next","tagName":"h3"},{"title":"Getting and Setting Values​","type":1,"pageTitle":"Basic Usage","url":"/EasyState/docs/basic#getting-and-setting-values","content":" -- Get the current value local currentValue = counter:Get() -- Set a new value counter:Set(5) name:Set(&quot;NewPlayer&quot;) isActive:Set(true) playerData:Set({ health = 90, level = 2 }) -- Reset to original value counter:Reset()   ","version":"Next","tagName":"h3"},{"title":"Subscribing to Changes​","type":1,"pageTitle":"Basic Usage","url":"/EasyState/docs/basic#subscribing-to-changes","content":" -- Basic subscription local subscription = counter:Subscribe(function(newValue) print(&quot;Counter changed to:&quot;, newValue) end) -- Subscribe until a specific value is reached local untilSubscription = counter:SubscribeUntil(function(value) print(&quot;Counter is now:&quot;, value) end, 10) -- Unsubscribe when done counter:Unsubscribe(subscription)   ","version":"Next","tagName":"h3"},{"title":"Type Safety​","type":1,"pageTitle":"Basic Usage","url":"/EasyState/docs/basic#type-safety","content":" EasyState is type-locked once created. This means you cannot change the type of value after initialization:  local numberState = EasyState.new(5) numberState:Set(10) -- Works fine numberState:Set(&quot;string&quot;) -- Warning: Type mismatch, request will be dropped   ","version":"Next","tagName":"h3"},{"title":"Table Values​","type":1,"pageTitle":"Basic Usage","url":"/EasyState/docs/basic#table-values","content":" When working with table values, EasyState automatically clones the tables to prevent reference issues:  local data = EasyState.new({ count = 0 }) -- Getting returns a clone local currentData = data:Get() currentData.count = 5 -- Won't affect the original state -- Setting with a table data:Set({ count = 10 })  ","version":"Next","tagName":"h3"},{"title":"EasyState","type":0,"sectionRef":"#","url":"/EasyState/api/EasyState","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"EasyState","url":"/EasyState/api/EasyState#types","content":" ","version":null,"tagName":"h2"},{"title":"EasyStateValue​","type":1,"pageTitle":"EasyState","url":"/EasyState/api/EasyState#EasyStateValue","content":"&lt;/&gt; type EasyStateValue = number | string | boolean | {[any]: any} Represents the value of an EasyState object.  ","version":null,"tagName":"h3"},{"title":"Subscriber​","type":1,"pageTitle":"EasyState","url":"/EasyState/api/EasyState#Subscriber","content":"&lt;/&gt; type Subscriber = (number | string | boolean | {[any]: any})? → ...any Represents a function that will be called when the state changes.  ","version":null,"tagName":"h3"},{"title":"SubscriberID​","type":1,"pageTitle":"EasyState","url":"/EasyState/api/EasyState#SubscriberID","content":"&lt;/&gt; type SubscriberID = userdata Represents the ID of a subscriber.  ","version":null,"tagName":"h3"},{"title":"SubscriptionState​","type":1,"pageTitle":"EasyState","url":"/EasyState/api/EasyState#SubscriptionState","content":"&lt;/&gt; type SubscriptionState = &quot;Active&quot; | &quot;Suspended&quot; | &quot;Inactive&quot; Represents the status of a subscriber. ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"EasyState","url":"/EasyState/api/EasyState#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"EasyState","url":"/EasyState/api/EasyState#new","content":"&lt;/&gt; EasyState.new(value: boolean | number | string | {[any]: any}) → EasyState Creates a new EasyState instance with the given initial value. CAUTION It should be noted that EasyState deep clones on all accounts when working with tables. Do not expect external table updates to trigger subscribers. You are completely unable to access the deep cloned table by normal means. Updates for table-types must be done with :Set() if subscribers are to fire. local foo = {} print(foo) -- {} (table: 0x4324234234) local state = EasyState.new(foo) foo.bar = 'baz' print(state:Get()) -- {} (table: 0x12321321321)   ","version":null,"tagName":"h3"},{"title":"mini​","type":1,"pageTitle":"EasyState","url":"/EasyState/api/EasyState#mini","content":"&lt;/&gt; EasyState.mini(value: boolean | number | string | {[any]: any}) → EasyState Creates a minified EasyState instance with the given initial value. Mini states take less memory, but restrict the use of some methods. Methods which are restricted to mini-states have it noted in their documentation and docstrings. CAUTION Please see warning in the .new documentation for information on working with table-type EasyState objects.  ","version":null,"tagName":"h3"},{"title":"Get​","type":1,"pageTitle":"EasyState","url":"/EasyState/api/EasyState#Get","content":"&lt;/&gt; EasyState:Get() → EasyStateValue Gets the current value of the state.  ","version":null,"tagName":"h3"},{"title":"GetOriginal​","type":1,"pageTitle":"EasyState","url":"/EasyState/api/EasyState#GetOriginal","content":"&lt;/&gt; EasyState:GetOriginal() → EasyStateValue Gets the original value of the state. ","version":null,"tagName":"h3"},{"title":"Errors","type":1,"pageTitle":"EasyState","url":"/EasyState/api/EasyState##","content":"Type\tDescriptionRestricted Method Access\tThis method is unavailable to minified states.  ","version":null,"tagName":"h3"},{"title":"Set​","type":1,"pageTitle":"EasyState","url":"/EasyState/api/EasyState#Set","content":"&lt;/&gt; EasyState:Set(value: EasyStateValue) → () Sets the state to a new value.  ","version":null,"tagName":"h3"},{"title":"Subscribe​","type":1,"pageTitle":"EasyState","url":"/EasyState/api/EasyState#Subscribe","content":"&lt;/&gt; EasyState:Subscribe(callback: Subscriber) → SubscriberID Subscribes a callback to the state.  ","version":null,"tagName":"h3"},{"title":"SubscribeUntil​","type":1,"pageTitle":"EasyState","url":"/EasyState/api/EasyState#SubscribeUntil","content":"&lt;/&gt; EasyState:SubscribeUntil( callback: Subscriber, untilValue: EasyStateValue ) → SubscriberID Subscribes a callback to the state until a certain value is reached.  ","version":null,"tagName":"h3"},{"title":"GetSubscriptionStatus​","type":1,"pageTitle":"EasyState","url":"/EasyState/api/EasyState#GetSubscriptionStatus","content":"&lt;/&gt; EasyState:GetSubscriptionStatus(subscriberID: SubscriberID) → SubscriptionState Gets the status of a subscriber by its ID.  ","version":null,"tagName":"h3"},{"title":"Unsubscribe​","type":1,"pageTitle":"EasyState","url":"/EasyState/api/EasyState#Unsubscribe","content":"&lt;/&gt; EasyState:Unsubscribe(subcriberID: SubscriberID) → () Unsubscribes a subscriber.  ","version":null,"tagName":"h3"},{"title":"UnsubscribeUntil​","type":1,"pageTitle":"EasyState","url":"/EasyState/api/EasyState#UnsubscribeUntil","content":"&lt;/&gt; EasyState:UnsubscribeUntil( subscriberID: SubscriberID, untilValue: EasyStateValue, dropSubscriberAfter: number ) → () Unsubscribes a subscriber until a certain value is reached. Optionally allows a custom number of updates to pass before completely dropping the re-subscription potential.  ","version":null,"tagName":"h3"},{"title":"UnsubscribeAll​","type":1,"pageTitle":"EasyState","url":"/EasyState/api/EasyState#UnsubscribeAll","content":"&lt;/&gt; EasyState:UnsubscribeAll() → () Unsubscribes all subscribers. Suspended subscribers will still be re-subscribed if their condition is met.  ","version":null,"tagName":"h3"},{"title":"Reset​","type":1,"pageTitle":"EasyState","url":"/EasyState/api/EasyState#Reset","content":"&lt;/&gt; EasyState:Reset() → () Resets the state to its original value. ","version":null,"tagName":"h3"},{"title":"Errors","type":1,"pageTitle":"EasyState","url":"/EasyState/api/EasyState##","content":"Type\tDescriptionRestricted Method Access\tThis method is unavailable to minified states.  ","version":null,"tagName":"h3"},{"title":"Freeze​","type":1,"pageTitle":"EasyState","url":"/EasyState/api/EasyState#Freeze","content":"&lt;/&gt; EasyState:Freeze() → () Freezes the state so that it cannot be changed.  ","version":null,"tagName":"h3"},{"title":"Unfreeze​","type":1,"pageTitle":"EasyState","url":"/EasyState/api/EasyState#Unfreeze","content":"&lt;/&gt; EasyState:Unfreeze() → () Unfreezes the state so that it can be changed again.  ","version":null,"tagName":"h3"},{"title":"IsFrozen​","type":1,"pageTitle":"EasyState","url":"/EasyState/api/EasyState#IsFrozen","content":"&lt;/&gt; EasyState:IsFrozen() → boolean Checks if the state is frozen. ","version":null,"tagName":"h3"}],"options":{"id":"default"}}